import datetime
import json
import os
import logging
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, filters

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MENU_CHOICE, ASK_PH, ASK_TEMP, ASK_AMMONIA = range(4)

DATA_PATH = "data/water_params.json"

async def water_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", callback_data="ADD_PARAMS")],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data="SHOW_GRAPH")],
        [InlineKeyboardButton("–í–∏–π—Ç–∏ ‚ùå", callback_data="CANCEL")]
    ]
    await update.message.reply_text(
        "üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏:\n–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MENU_CHOICE

async def restart_water_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", callback_data="ADD_PARAMS")],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data="SHOW_GRAPH")],
        [InlineKeyboardButton("–í–∏–π—Ç–∏ ‚ùå", callback_data="CANCEL")]
    ]
    await update.message.reply_text(
        "üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏:\n–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MENU_CHOICE

async def handle_water_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "ADD_PARAMS":
        await query.edit_message_text("üíß –í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è pH (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 7.5):")
        return ASK_PH
    elif query.data == "SHOW_GRAPH":
        await query.edit_message_text("üìä –°—Ç–≤–æ—Ä—é—é –≥—Ä–∞—Ñ—ñ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...")
        await send_graph(update, context)
        return ConversationHandler.END
    elif query.data == "CANCEL":
        await query.edit_message_text("‚ùé –í–∏—Ö—ñ–¥ –∑ —Ä–æ–∑–¥—ñ–ª—É —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏.")
        return ConversationHandler.END

async def invalid_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
    return None

async def received_ph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        ph = float(text)
        if not (0 <= ph <= 14):
            await update.message.reply_text("pH –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 14. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 7.5):")
            return ASK_PH
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–µ pH. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 7.5:")
        return ASK_PH
    context.user_data['ph'] = ph
    await update.message.reply_text("üå°Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É ¬∞C (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25):")
    return ASK_TEMP

async def received_temp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace('¬∞', '')
    try:
        temp = float(text)
        if not (10 <= temp <= 40):
            await update.message.reply_text("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 40¬∞C. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25):")
            return ASK_TEMP
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25:")
        return ASK_TEMP
    context.user_data['temp'] = temp
    await update.message.reply_text("üß™ –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –∞–º—ñ–∞–∫—É –≤ ppm (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.5):")
    return ASK_AMMONIA

async def received_ammonia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().replace('ppm', '')
    try:
        ammonia = float(text)
        if not (0 <= ammonia <= 10):
            await update.message.reply_text("–ê–º—ñ–∞–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0 –¥–æ 10 ppm. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.5):")
            return ASK_AMMONIA
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–º—ñ–∞–∫. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0.5:")
        return ASK_AMMONIA

    ph = context.user_data['ph']
    temp = context.user_data['temp']
    user_id = str(update.message.from_user.id)
    record = {
        "timestamp": datetime.datetime.now().isoformat(),
        "ph": ph,
        "temp": temp,
        "ammonia": ammonia
    }
    os.makedirs(os.path.dirname(DATA_PATH), exist_ok=True)
    try:
        with open(DATA_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = {}

    if user_id not in data:
        data[user_id] = []
    data[user_id].append(record)

    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    issues = []
    if ph < 6.5:
        issues.append("pH –∑–∞–Ω–∏–∑—å–∫–∏–π ‚Äî –ø—ñ–¥–≤–∏—â—Ç–µ –∫–∞—Ä–±–æ–Ω–∞—Ç–Ω—É –∂–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å.")
    elif ph > 7.5:
        issues.append("pH –∑–∞–≤–∏—â–µ–Ω–∏–π ‚Äî –ø—ñ–¥–º—ñ–Ω—ñ—Ç—å –≤–æ–¥—É —á–∞—Å—Ç–∫–æ–≤–æ.")
    if temp < 24:
        issues.append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∞ ‚Äî –ø—ñ–¥—ñ–≥—Ä—ñ–π—Ç–µ –≤–æ–¥—É.")
    elif temp > 28:
        issues.append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞ ‚Äî –æ—Ö–æ–ª–æ–¥—ñ—Ç—å –≤–æ–¥—É.")
    if ammonia > 0.25:
        issues.append("–ê–º—ñ–∞–∫ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–π ‚Äî –∑—Ä–æ–±—ñ—Ç—å –ø—ñ–¥–º—ñ–Ω—É –≤–æ–¥–∏.")
    if not issues:
        issues.append("–£—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏ üëç")

    result = "\n".join(issues)
    await update.message.reply_text(f"üíß –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:\n{result}")
    return ConversationHandler.END

async def send_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if not os.path.exists(DATA_PATH):
        await update.effective_chat.send_message("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
        return

    try:
        with open(DATA_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        logger.error(f"Error reading {DATA_PATH}: {e}")
        await update.effective_chat.send_message("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")
        return

    records = data.get(user_id, [])
    if not records:
        await update.effective_chat.send_message("–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    now = datetime.datetime.now()
    one_month_ago = now - datetime.timedelta(days=30)
    recent = []
    for r in records:
        try:
            ts = datetime.datetime.fromisoformat(r["timestamp"])
            if ts >= one_month_ago:
                recent.append(r)
        except Exception:
            continue

    data[user_id] = recent
    try:
        with open(DATA_PATH, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error writing {DATA_PATH}: {e}")

    if len(recent) < 2:
        await update.effective_chat.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± 2 –∑–∞–ø–∏—Å–∏).")
        return

    dates = [datetime.datetime.fromisoformat(r["timestamp"]) for r in recent]
    ph_vals = [r["ph"] for r in recent]
    temp_vals = [r["temp"] for r in recent]
    ammonia_vals = [r["ammonia"] for r in recent]

    def make_graph(dates, values, ylabel, title, filename):
        try:
            plt.figure(figsize=(4, 3))
            plt.plot(dates, values, marker='o', color='blue')
            if ylabel == "pH":
                plt.axhline(y=6.5, color='green', linestyle='--', alpha=0.5)
                plt.axhline(y=7.5, color='green', linestyle='--', alpha=0.5)
            elif ylabel == "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C":
                plt.axhline(y=24, color='green', linestyle='--', alpha=0.5)
                plt.axhline(y=28, color='green', linestyle='--', alpha=0.5)
            elif ylabel == "–ê–º—ñ–∞–∫ ppm":
                plt.axhline(y=0.25, color='green', linestyle='--', alpha=0.5)
            plt.title(title)
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel(ylabel)
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig(filename, format='png', dpi=80)
            plt.close()
            if not os.path.exists(filename) or os.path.getsize(filename) == 0:
                raise ValueError(f"Failed to save graph: {filename}")
            logger.info(f"Graph saved: {filename}")
        except Exception as e:
            logger.error(f"Error generating graph {filename}: {e}")
            raise

    graph_dir = "data"
    os.makedirs(graph_dir, exist_ok=True)

    paths = {
        "ph": os.path.join(graph_dir, f"graph_ph_{user_id}.png"),
        "temp": os.path.join(graph_dir, f"graph_temp_{user_id}.png"),
        "ammonia": os.path.join(graph_dir, f"graph_ammonia_{user_id}.png"),
    }

    try:
        make_graph(dates, ph_vals, "pH", "–î–∏–Ω–∞–º—ñ–∫–∞ pH (–æ—Å—Ç. 30 –¥–Ω—ñ–≤)", paths["ph"])
        make_graph(dates, temp_vals, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ¬∞C", "–î–∏–Ω–∞–º—ñ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ (–æ—Å—Ç. 30 –¥–Ω—ñ–≤)", paths["temp"])
        make_graph(dates, ammonia_vals, "–ê–º—ñ–∞–∫ ppm", "–î–∏–Ω–∞–º—ñ–∫–∞ –∞–º—ñ–∞–∫—É (–æ—Å—Ç. 30 –¥–Ω—ñ–≤)", paths["ammonia"])

        for param, path in paths.items():
            if not os.path.exists(path):
                await update.effective_chat.send_message(f"–ü–æ–º–∏–ª–∫–∞: –≥—Ä–∞—Ñ—ñ–∫ {param} –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
                continue
            try:
                with open(path, 'rb') as f:
                    await update.effective_chat.send_photo(
                        photo=InputFile(f, filename=f"{param}.png"),
                        caption=f"üìä {param.capitalize()}"
                    )
            except Exception as e:
                logger.error(f"Error sending {path}: {e}")
                await update.effective_chat.send_message(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≥—Ä–∞—Ñ—ñ–∫–∞ {param}: {e}")
            finally:
                if os.path.exists(path):
                    os.remove(path)
                    logger.info(f"Deleted {path}")
    except Exception as e:
        logger.error(f"Error in send_graph: {e}")
        await update.effective_chat.send_message("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")
        return ConversationHandler.END

def get_water_conversation_handler():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), water_menu)],
        states={
            MENU_CHOICE: [
                CallbackQueryHandler(handle_water_choice),
                MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), restart_water_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, invalid_input),
            ],
            ASK_PH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_ph),
                MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), restart_water_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, invalid_input),
            ],
            ASK_TEMP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_temp),
                MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), restart_water_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, invalid_input),
            ],
            ASK_AMMONIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, received_ammonia),
                MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), restart_water_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, invalid_input),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern="^CANCEL$"),
            MessageHandler(filters.Regex("^üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏$"), restart_water_menu),
        ]
    )