# handlers/disease.py

import logging
import aiohttp
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from database.diseases import DISEASE_LABELS, TREATMENTS
from config import OPENROUTER_API_KEY, OPENROUTER_MODEL, OPENROUTER_ENDPOINT

logger = logging.getLogger(__name__)

# –í–ª–∞—Å–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ OpenRouter
async def fetch_from_llm(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∏–±—è—á–∏—Ö —Ö–≤–æ—Ä–æ–±. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."},
            {"role": "user",   "content": prompt},
        ],
        "max_tokens": 200,
        "temperature": 0.2,
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(OPENROUTER_ENDPOINT, json=payload, headers=headers) as resp:
            data = await resp.json()
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            return data["choices"][0]["message"]["content"].strip()

ASK_SYMPTOMS = 0

async def disease_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–í–∏–π—Ç–∏ ‚ùå", callback_data="CANCEL")]]
    await update.message.reply_text(
        "ü©∫ –û–ø–∏—à—ñ—Ç—å —Å–∏–º–ø—Ç–æ–º–∏ —Ä–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "–ú–æ—è —Ä–∏–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏–ª–∞ –∞–ø–µ—Ç–∏—Ç —ñ —É –Ω–µ—ó –±—ñ–ª—ñ –ø–ª—è–º–∏ –Ω–∞ –ø–ª–∞–≤–Ω–∏–∫–∞—Ö.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return ASK_SYMPTOMS

async def disease_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symptoms = update.message.text.strip()
    # –û–≥–æ–ª–æ—à—É—î–º–æ prompt —Ç—É—Ç
    prompt = (
        f"–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö —Å–∏–º–ø—Ç–æ–º—ñ–≤ —Ä–∏–±–∫–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫—É–π –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è "
        f"–ø–æ –æ–¥–Ω—ñ–π –∑ –º—ñ—Ç–æ–∫:\n{', '.join(DISEASE_LABELS)}\n"
        f"–°–∏–º–ø—Ç–æ–º–∏: {symptoms}\n"
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤–æ—é —Ö–≤–æ—Ä–æ–±–∏."
    )
    await update.message.reply_text("üîÑ –ê–Ω–∞–ª—ñ–∑—É—é —á–µ—Ä–µ–∑ –®–Ü‚Ä¶")
    try:
        raw = await fetch_from_llm(prompt)
    except Exception as e:
        logger.error(f"fetch_from_llm error: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –®–Ü: {e}")
        return ConversationHandler.END

    # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ markdown
    cleaned = raw.replace("```", "").replace("`", "").replace("*", "").strip()
    disease_name = cleaned.splitlines()[0]
    key = disease_name.lower()

    # –°—Ç–∞—Ç–∏—á–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –ø–æ—Ä–∞–¥
    treatment = TREATMENTS.get(
        key,
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –¥—ñ–∞–≥–Ω–æ–∑—É."
    )
    await update.message.reply_text(
        f"–î—ñ–∞–≥–Ω–æ–∑: {disease_name}\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {treatment}"
    )
    return ConversationHandler.END

async def disease_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùé –í–∏—Ö—ñ–¥ –∑ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ö–≤–æ—Ä–æ–±.")
    return ConversationHandler.END

from telegram.ext import CallbackQueryHandler as CQH, MessageHandler as MH

def get_disease_conversation_handler():
    return ConversationHandler(
        entry_points=[MH(filters.Regex(r"^ü©∫ –•–≤–æ—Ä–æ–±–∏ —Ä–∏–±–æ–∫$"), disease_menu)],
        states={ASK_SYMPTOMS: [MH(filters.TEXT & ~filters.COMMAND, disease_answer)]},
        fallbacks=[CQH(disease_cancel, pattern="^CANCEL$")],
    )