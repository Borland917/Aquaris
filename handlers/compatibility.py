import csv
import difflib
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, ConversationHandler, MessageHandler,
    CallbackQueryHandler, filters
)

# –°—Ç–∞–Ω –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–µ–Ω–∞
CHOOSING = 0

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
FISH_COMPAT = {}
with open('data/fish.csv', 'r', encoding='utf-8') as f:
    reader = csv.reader(f)
    header = next(reader)[1:]
    for row in reader:
        fish = row[0].lower()
        FISH_COMPAT[fish] = dict(zip(
            [h.lower() for h in header], row[1:]
        ))
# –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≤–∏–¥—ñ–≤ –¥–ª—è –ø—ñ–¥–∫–∞–∑–æ–∫
ALL_FISH = list(FISH_COMPAT.keys())

async def compat_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—É—î –¥—ñ–∞–ª–æ–≥ –∑ –∫–Ω–æ–ø–∫–æ—é –≤–∏—Ö–æ–¥—É —ñ —á–µ–∫–∞—î –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–∏–± —á–µ—Ä–µ–∑ –∫–æ–º—É.
    """
    keyboard = [[InlineKeyboardButton("–í–∏–π—Ç–∏ ‚ùå", callback_data="CANCEL")]]
    await update.message.reply_text(
        "üîó –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤–∏ —Ä–∏–± —á–µ—Ä–µ–∑ –∫–æ–º—É (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ù–µ–æ–Ω, –¶–∏—Ö–ª—ñ–¥–∞, –ì—É–ø–ø—ñ):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CHOOSING

async def compat_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –í–∏–∫–æ–Ω—É—î fuzzy matching –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö
    –≤–∏–¥—ñ–≤ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–∏ –Ω–∞ –Ω–µ—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å.
    """
    text = update.message.text
    fishes = [s.strip().lower() for s in text.split(',') if s.strip()]

    known, unknown, suggestions = [], [], {}
    for fish in fishes:
        if fish in FISH_COMPAT:
            known.append(fish)
        else:
            # –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
            close = difflib.get_close_matches(fish, ALL_FISH, n=3, cutoff=0.6)
            if close:
                suggestions[fish] = close
            unknown.append(fish)

    if unknown:
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–µ–≤—ñ–¥–æ–º—ñ —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
        msg = "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: "
        for f in unknown:
            if f in suggestions:
                msg += f"‚Äî ¬´{f}¬ª, –º–æ–∂–ª–∏–≤–æ: {', '.join(suggestions[f])} "
            else:
                msg += f"‚Äî ¬´{f}¬ª "
        msg += "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –Ω–∞–∑–≤–æ—é."
        await update.message.reply_text(msg)
        return CHOOSING
        await update.message.reply_text(msg)
        return CHOOSING

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –ø–∞—Ä–∏
    incompatible = []
    for i in range(len(known)):
        for j in range(i+1, len(known)):
            f1, f2 = known[i], known[j]
            status = FISH_COMPAT[f1].get(f2)
            if status == '‚ùå':
                incompatible.append((f1.title(), f2.title()))

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if incompatible:
        msg = "‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å—É–º—ñ—Å–Ω—ñ –ø–∞—Ä–∏:\n"
        msg += '\n'.join(f"‚Äî {a} —Ç–∞ {b}" for a, b in incompatible)
    else:
        msg = "‚úÖ –£—Å—ñ –≤–≤–µ–¥–µ–Ω—ñ —Ä–∏–±–∫–∏ —Å—É–º—ñ—Å–Ω—ñ –º—ñ–∂ —Å–æ–±–æ—é."

    await update.message.reply_text(msg)
    return ConversationHandler.END

async def compat_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–∏—Ö—ñ–¥ –∑ –¥—ñ–∞–ª–æ–≥—É —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ.
    """
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùé –í–∏—Ö—ñ–¥ –∑ –°—É–º—ñ—Å–Ω–æ—Å—Ç—ñ.")
    return ConversationHandler.END

from telegram.ext import CallbackQueryHandler as CQH, MessageHandler as MH


def get_compat_conversation_handler():
    return ConversationHandler(
        entry_points=[MH(filters.Regex(r"^üîó –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å —Ä–∏–±–æ–∫$"), compat_menu)],
        states={CHOOSING: [MH(filters.TEXT & ~filters.COMMAND, compat_answer)]},
        fallbacks=[CQH(compat_cancel, pattern="^CANCEL$")]
    )