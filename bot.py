import logging
import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler

from config import BOT_TOKEN
from handlers.faq import get_faq_conversation_handler
from handlers.compatibility import get_compat_conversation_handler
from handlers.disease import get_disease_conversation_handler
from handlers.water_params import get_water_conversation_handler
from handlers.reminders import get_reminders_conversation_handler
from database.db import init_db, get_db, fetch_due_reminders

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î
init_db()

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [
        ["‚ùì FAQ", "üîó –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å —Ä–∏–±–æ–∫"],
        ["ü©∫ –•–≤–æ—Ä–æ–±–∏ —Ä–∏–±–æ–∫", "üíß –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏"],
        ["‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"]
    ],
    resize_keyboard=True
)

async def start(update: Update, context):
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open('data/welcome.jpg', 'rb'),
        caption="üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Aquaris Bot!"
    )
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup=main_menu)

async def menu_fallback(update: Update, context):
    logger.info(f"Fallback triggered for user {update.effective_user.id}: {update.message.text}")
    if context.user_data.get('conversation_state'):
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å '–í–∏–π—Ç–∏' —É –º–µ–Ω—é."
        )
        return
    await update.message.reply_text("–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ:", reply_markup=main_menu)

async def cancel_conversation(update: Update, context):
    logger.info(f"Cancel conversation for user {update.effective_user.id}")
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùé –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:", reply_markup=main_menu
    )
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start))

    # –ö–æ–º–∞–Ω–¥–∞ /cancel
    app.add_handler(CommandHandler("cancel", cancel_conversation))

    # –ú–µ–Ω—é-—Ñ—É–Ω–∫—Ü—ñ—ó
    app.add_handler(get_faq_conversation_handler())
    app.add_handler(get_compat_conversation_handler())
    app.add_handler(get_disease_conversation_handler())
    app.add_handler(get_water_conversation_handler())
    app.add_handler(get_reminders_conversation_handler())

    # –ó–∞–≥–∞–ª—å–Ω–∏–π fallback
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_fallback))

    # APScheduler –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(
        lambda: [
            context.bot.send_message(chat_id=chat, text=f"‚è∞ {msg}")
            for chat, msg, _ in fetch_due_reminders(get_db(), datetime.datetime.now())
        ],
        trigger='interval', hours=1,
        next_run_time=datetime.datetime.now() + datetime.timedelta(seconds=10)
    )
    scheduler.start()
    logger.info("‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω–∏–π")

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()